{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Disciplina Algoritmos e Estrutura de Dados Professor Nome: Allan (Allainclair Flausino dos Santos) Email: allainclair@gmail.com Gradua\u00e7\u00e3o: Mestre em Ci\u00eancia da computa\u00e7\u00e3o Informa\u00e7\u00f5es profissionais : LinkeIn - https://www.linkedin.com/in/allainclair/ Disciplina Site: https://allainclair.github.io/disc-alg-est-dados/ Avalia\u00e7\u00e3o (projeto) prova 1 [0-10] prova 2 [0-10] trabalho 1 [0-10] trabalho 2 [0-10] Nota final (NF): (prova 1 + prova 2 + trabalho 1 + trabalho 2) / 4 Nota Exame (NE) M\u00e9dia final (MF) = (NF + NE) / 2 Python if NF > 6.0 : print ( 'aprovado' ) elif MF > 5.0 : print ( 'aprovado' ) else : print ( 'reprovado' ) Ementa Estudo de algoritmos e estruturas de dados para representa\u00e7\u00e3o e manipula\u00e7\u00e3o de informa\u00e7\u00f5es. Teorias dos Grafos. Aplica\u00e7\u00f5es. Objetivos Estudar as principais estruturas de dados: listas, \u00e1rvores e tabelas; m\u00e9todos de busca e classifica\u00e7\u00e3o de dados. No\u00e7\u00f5es de complexidade de algoritmos. Estudar modelagem de tipos abstratos de dados e objetos. Introdu\u00e7\u00e3o a Teorias dos Grafos. Desenvolver implementa\u00e7\u00f5es em uma linguagem de alto n\u00edvel. Conte\u00fado program\u00e1tico Conceitos b\u00e1sicos 1.1 Tipos Abstrato de Dados e Objetos 1.2 Estruturas de dados 1.3. Formas de aloca\u00e7\u00e3o 1.4 No\u00e7\u00f5es de complexidade de algoritmos Listas 2.1 Listas lineares est\u00e1ticas e din\u00e2micas 2.2 Listas circulares e duplamente ligadas 2.3 Filas e Pilhas 2.4 Algoritmos b\u00e1sicos de gerenciamento \u00c1rvores 3.1. \u00c1rvores bin\u00e1rias 3.2. \u00c1rvores de pesquisa 3.3. \u00c1rvores AVL 3.4. Alguns algoritmos b\u00e1sicos de travessia e gerenciamento Tabelas e m\u00e9todos de busca 4.1 Pesquisa seq\u00fcencial 4.2 Pesquisa bin\u00e1ria 4.3 Pesquisa atrav\u00e9s de c\u00e1lculo de endere\u00e7o 4.4 Alguns algoritmos b\u00e1sicos de travessia e gerenciamento Classifica\u00e7\u00e3o e m\u00e9todos de busca 5.1 Classifica\u00e7\u00e3o por inser\u00e7\u00e3o (direta e m\u00e9todo dos incrementos decrescentes) 5.2 Classifica\u00e7\u00e3o por troca (m\u00e9todo da bolha e m\u00e9todo de troca e parti\u00e7\u00e3o) 5.3 Classifica\u00e7\u00e3o por sele\u00e7\u00e3o (m\u00e9todo de sele\u00e7\u00e3o direta e m\u00e9todo de sele\u00e7\u00e3o em \u00e1rvore) 5.4 Classifica\u00e7\u00e3o por distribui\u00e7\u00e3o 5.5 Classifica\u00e7\u00e3o por intercala\u00e7\u00e3o Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos 6.1 Hist\u00f3rico e apresenta\u00e7\u00e3o de problemas com solu\u00e7\u00e3o atrav\u00e9s da Teoria dos Grafos. 6.2 Defini\u00e7\u00f5es, elementos b\u00e1sicos e representa\u00e7\u00e3o gr\u00e1fica (n\u00f3, arco, rotula\u00e7\u00e3o, subgrafos, tipos de grafo, opera\u00e7\u00f5es sobre grafos). 6.3 Representa\u00e7\u00f5es computacionais. 6.4 Algoritmos b\u00e1sicos de travessia Implementa\u00e7\u00e3o das estruturas algor\u00edtmicas em uma linguagem de alto n\u00edvel Refer\u00eancias CELES, W.; CERQUEIRA, R.; NETTO, J.L.R. Introdu\u00e7\u00e3o \u00e0s estruturas de dados. Rio de Janeiro: Editora Campus, 2004; CORMEN, T.H.; LEISERSON,C.E.; STEIN, C.; RIVEST, R.L. Algoritmos: Teoria e Pr\u00e1tica. Terceira Edi\u00e7\u00e3o. Editora Campus, 2011; FOLK, M. J.; ZOELLICK, B. File Structures. Second Edition. Addison-Wesley, 1992; FORBELLONE, A. L. V.; EBERSP\u00c4CHER, H. F. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados. 3a ed. S\u00e3o Paulo: Prentice-Hall, 2005; GUIMAR\u00c3ES, A.M.; LAGES, N.A.C. Algoritmos e estruturas de dados. Rio de Janeiro: LTC \u2013 Livros T\u00e9cnicos e Cient\u00edficos Editora S.A., 1994; HOROWITZ, E. E.; SAHNI, S. Fundamentos de Estruturas de Dados, Editora Campus, 1987; LOPES, A.; GARCIA, G. Introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o: 500 Algoritmos Resolvidos. Rio de Janeiro: Elsevier, 2006; PREISS, B. R. Estruturas de dados e algoritmos. Editora Campus, 2001. SALVETTI, D. D., BARBOSA, L. M. Algoritmos. S\u00e3o Paulo: Pearson Education do Brasil, 1998; SZWARCFITER, J.L.; MARKENZON, L. Estruturas de dados e seus algoritmos. 1a edi\u00e7\u00e3o. Rio de Janeiro: LTC \u2013 Livros T\u00e9cnicos e Cient\u00edficos Editora S.A., 1994; TENENBAUM, A.M.; LANGSAM, Y.; AUGENSTEIN, M.J. Estruturas de dados usando C. S\u00e3o Paulo: MAKRON Books, 1995; VELOSO, Paulo. Estruturas de dados. 2a Edi\u00e7\u00e3o. Rio de Janeiro: Campus, 1984. WIRTH, N. Algoritmos e estruturas de dados. 2a edi\u00e7\u00e3o. Rio de Janeiro: Editora Prentice-Hall do Brasil Ltda., 1989. Cronograma Calend\u00e1rio 07 mar\u00e7o 2019 in\u00edcio do ano letivo e 1\u00ba semestre; 13 julho 2019 fim das aulas do primeiro semestre; 17-23 julho avalia\u00e7\u00e3o final. Aulas/Provas Abril 2019-04-05 Conceitos b\u00e1sicos 2019-04-08 Conceitos b\u00e1sicos 2019-04-12 Conceitos b\u00e1sicos 2019-04-15 Conceitos b\u00e1sicos 2019-04-19 Listas 2019-04-22 Listas 2019-04-26 Listas 2019-04-29 Listas Total = 8 Maio 2019-05-03 \u00c1rvores 2019-05-06 \u00c1rvores 2019-05-10 \u00c1rvores 2019-05-17 \u00c1rvores 2019-05-20 Tabelas e m\u00e9todos de busca 2019-05-24 Tabelas e m\u00e9todos de busca 2019-05-27 Tabelas e m\u00e9todos de busca 2019-05-31 Tabelas e m\u00e9todos de busca Total = 8 Junho 2019-06-03 Classifica\u00e7\u00e3o e m\u00e9todos de busca 2019-06-07 Classifica\u00e7\u00e3o e m\u00e9todos de busca 2019-06-10 Classifica\u00e7\u00e3o e m\u00e9todos de busca 2019-06-14 Classifica\u00e7\u00e3o e m\u00e9todos de busca 2019-06-17 Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos 2019-06-24 Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos 2019-06-28 Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos Total = 7 Julho 2019-07-01 Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos 2019-07-05 2019-07-08 2019-07-12 2019-07-19 - Final 2019-07-22 - Final Total = 4 (sem final) Total geral = 27 Total menos duas provas = 25","title":"Introdu\u00e7\u00e3o"},{"location":"#disciplina-algoritmos-e-estrutura-de-dados","text":"","title":"Disciplina Algoritmos e Estrutura de Dados"},{"location":"#professor","text":"Nome: Allan (Allainclair Flausino dos Santos) Email: allainclair@gmail.com Gradua\u00e7\u00e3o: Mestre em Ci\u00eancia da computa\u00e7\u00e3o Informa\u00e7\u00f5es profissionais : LinkeIn - https://www.linkedin.com/in/allainclair/","title":"Professor"},{"location":"#disciplina","text":"Site: https://allainclair.github.io/disc-alg-est-dados/","title":"Disciplina"},{"location":"#avaliacao-projeto","text":"prova 1 [0-10] prova 2 [0-10] trabalho 1 [0-10] trabalho 2 [0-10] Nota final (NF): (prova 1 + prova 2 + trabalho 1 + trabalho 2) / 4 Nota Exame (NE) M\u00e9dia final (MF) = (NF + NE) / 2 Python if NF > 6.0 : print ( 'aprovado' ) elif MF > 5.0 : print ( 'aprovado' ) else : print ( 'reprovado' )","title":"Avalia\u00e7\u00e3o (projeto)"},{"location":"#ementa","text":"Estudo de algoritmos e estruturas de dados para representa\u00e7\u00e3o e manipula\u00e7\u00e3o de informa\u00e7\u00f5es. Teorias dos Grafos. Aplica\u00e7\u00f5es.","title":"Ementa"},{"location":"#objetivos","text":"Estudar as principais estruturas de dados: listas, \u00e1rvores e tabelas; m\u00e9todos de busca e classifica\u00e7\u00e3o de dados. No\u00e7\u00f5es de complexidade de algoritmos. Estudar modelagem de tipos abstratos de dados e objetos. Introdu\u00e7\u00e3o a Teorias dos Grafos. Desenvolver implementa\u00e7\u00f5es em uma linguagem de alto n\u00edvel.","title":"Objetivos"},{"location":"#conteudo-programatico","text":"Conceitos b\u00e1sicos 1.1 Tipos Abstrato de Dados e Objetos 1.2 Estruturas de dados 1.3. Formas de aloca\u00e7\u00e3o 1.4 No\u00e7\u00f5es de complexidade de algoritmos Listas 2.1 Listas lineares est\u00e1ticas e din\u00e2micas 2.2 Listas circulares e duplamente ligadas 2.3 Filas e Pilhas 2.4 Algoritmos b\u00e1sicos de gerenciamento \u00c1rvores 3.1. \u00c1rvores bin\u00e1rias 3.2. \u00c1rvores de pesquisa 3.3. \u00c1rvores AVL 3.4. Alguns algoritmos b\u00e1sicos de travessia e gerenciamento Tabelas e m\u00e9todos de busca 4.1 Pesquisa seq\u00fcencial 4.2 Pesquisa bin\u00e1ria 4.3 Pesquisa atrav\u00e9s de c\u00e1lculo de endere\u00e7o 4.4 Alguns algoritmos b\u00e1sicos de travessia e gerenciamento Classifica\u00e7\u00e3o e m\u00e9todos de busca 5.1 Classifica\u00e7\u00e3o por inser\u00e7\u00e3o (direta e m\u00e9todo dos incrementos decrescentes) 5.2 Classifica\u00e7\u00e3o por troca (m\u00e9todo da bolha e m\u00e9todo de troca e parti\u00e7\u00e3o) 5.3 Classifica\u00e7\u00e3o por sele\u00e7\u00e3o (m\u00e9todo de sele\u00e7\u00e3o direta e m\u00e9todo de sele\u00e7\u00e3o em \u00e1rvore) 5.4 Classifica\u00e7\u00e3o por distribui\u00e7\u00e3o 5.5 Classifica\u00e7\u00e3o por intercala\u00e7\u00e3o Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos 6.1 Hist\u00f3rico e apresenta\u00e7\u00e3o de problemas com solu\u00e7\u00e3o atrav\u00e9s da Teoria dos Grafos. 6.2 Defini\u00e7\u00f5es, elementos b\u00e1sicos e representa\u00e7\u00e3o gr\u00e1fica (n\u00f3, arco, rotula\u00e7\u00e3o, subgrafos, tipos de grafo, opera\u00e7\u00f5es sobre grafos). 6.3 Representa\u00e7\u00f5es computacionais. 6.4 Algoritmos b\u00e1sicos de travessia Implementa\u00e7\u00e3o das estruturas algor\u00edtmicas em uma linguagem de alto n\u00edvel","title":"Conte\u00fado program\u00e1tico"},{"location":"#referencias","text":"CELES, W.; CERQUEIRA, R.; NETTO, J.L.R. Introdu\u00e7\u00e3o \u00e0s estruturas de dados. Rio de Janeiro: Editora Campus, 2004; CORMEN, T.H.; LEISERSON,C.E.; STEIN, C.; RIVEST, R.L. Algoritmos: Teoria e Pr\u00e1tica. Terceira Edi\u00e7\u00e3o. Editora Campus, 2011; FOLK, M. J.; ZOELLICK, B. File Structures. Second Edition. Addison-Wesley, 1992; FORBELLONE, A. L. V.; EBERSP\u00c4CHER, H. F. L\u00f3gica de programa\u00e7\u00e3o: a constru\u00e7\u00e3o de algoritmos e estruturas de dados. 3a ed. S\u00e3o Paulo: Prentice-Hall, 2005; GUIMAR\u00c3ES, A.M.; LAGES, N.A.C. Algoritmos e estruturas de dados. Rio de Janeiro: LTC \u2013 Livros T\u00e9cnicos e Cient\u00edficos Editora S.A., 1994; HOROWITZ, E. E.; SAHNI, S. Fundamentos de Estruturas de Dados, Editora Campus, 1987; LOPES, A.; GARCIA, G. Introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o: 500 Algoritmos Resolvidos. Rio de Janeiro: Elsevier, 2006; PREISS, B. R. Estruturas de dados e algoritmos. Editora Campus, 2001. SALVETTI, D. D., BARBOSA, L. M. Algoritmos. S\u00e3o Paulo: Pearson Education do Brasil, 1998; SZWARCFITER, J.L.; MARKENZON, L. Estruturas de dados e seus algoritmos. 1a edi\u00e7\u00e3o. Rio de Janeiro: LTC \u2013 Livros T\u00e9cnicos e Cient\u00edficos Editora S.A., 1994; TENENBAUM, A.M.; LANGSAM, Y.; AUGENSTEIN, M.J. Estruturas de dados usando C. S\u00e3o Paulo: MAKRON Books, 1995; VELOSO, Paulo. Estruturas de dados. 2a Edi\u00e7\u00e3o. Rio de Janeiro: Campus, 1984. WIRTH, N. Algoritmos e estruturas de dados. 2a edi\u00e7\u00e3o. Rio de Janeiro: Editora Prentice-Hall do Brasil Ltda., 1989.","title":"Refer\u00eancias"},{"location":"#cronograma","text":"","title":"Cronograma"},{"location":"#calendario","text":"07 mar\u00e7o 2019 in\u00edcio do ano letivo e 1\u00ba semestre; 13 julho 2019 fim das aulas do primeiro semestre; 17-23 julho avalia\u00e7\u00e3o final.","title":"Calend\u00e1rio"},{"location":"#aulasprovas","text":"","title":"Aulas/Provas"},{"location":"#abril","text":"2019-04-05 Conceitos b\u00e1sicos 2019-04-08 Conceitos b\u00e1sicos 2019-04-12 Conceitos b\u00e1sicos 2019-04-15 Conceitos b\u00e1sicos 2019-04-19 Listas 2019-04-22 Listas 2019-04-26 Listas 2019-04-29 Listas Total = 8","title":"Abril"},{"location":"#maio","text":"2019-05-03 \u00c1rvores 2019-05-06 \u00c1rvores 2019-05-10 \u00c1rvores 2019-05-17 \u00c1rvores 2019-05-20 Tabelas e m\u00e9todos de busca 2019-05-24 Tabelas e m\u00e9todos de busca 2019-05-27 Tabelas e m\u00e9todos de busca 2019-05-31 Tabelas e m\u00e9todos de busca Total = 8","title":"Maio"},{"location":"#junho","text":"2019-06-03 Classifica\u00e7\u00e3o e m\u00e9todos de busca 2019-06-07 Classifica\u00e7\u00e3o e m\u00e9todos de busca 2019-06-10 Classifica\u00e7\u00e3o e m\u00e9todos de busca 2019-06-14 Classifica\u00e7\u00e3o e m\u00e9todos de busca 2019-06-17 Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos 2019-06-24 Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos 2019-06-28 Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos Total = 7","title":"Junho"},{"location":"#julho","text":"2019-07-01 Introdu\u00e7\u00e3o \u00e0 Teoria dos Grafos 2019-07-05 2019-07-08 2019-07-12 2019-07-19 - Final 2019-07-22 - Final Total = 4 (sem final) Total geral = 27 Total menos duas provas = 25","title":"Julho"},{"location":"LEIAME/","text":"Python 3 Usaremos o Python 3, preferencialmente a vers\u00e3o 3.7 mas creio que n\u00e3o teremos problemas ao usar a vers\u00e3o 3.5. Verifique com o comando python qual a vers\u00e3o, pode ser que o Python esteja na vers\u00e3o 2, se estiver, o comando python3 deve executar a vers\u00e3o 3 . Isto acontece pois sistemas linux vem com as duas vers\u00f5es instaladas, e pode ser que a vers\u00e3o padr\u00e3o (comando python ) seja a vers\u00e3o 2. Ao usar o comando python um prompt ser\u00e1 aberto para que comandos python sejam executados. Tamb\u00e9m ser\u00e1 mostrado a vers\u00e3o do python. Esse prompt tamb\u00e9m chamados de interpretador do Python. \u00c9 uma forma de executar comandos r\u00e1pidos em Python e ver a resposta desses comandos, assim como os comandos do shell/bash do linux. $ python Python 2 .7.13 ( default, Sep 26 2018 , 18 :42:22 ) ... $ python3 Python 3 .7.2 ( default, Feb 27 2019 , 16 :03:03 ) ... Lembre-se de usar sempre o python na vers\u00e3o 3, mesmo que tenha que usar o comando python3 . Executando seus arquivos.py Basta usar o comando python arquivo.py que seu programa ser\u00e1 executado. Sugest\u00f5es de IDEs (Integrated Development Environments) Atom Pycharm VIM","title":"LEIAME"},{"location":"LEIAME/#python-3","text":"Usaremos o Python 3, preferencialmente a vers\u00e3o 3.7 mas creio que n\u00e3o teremos problemas ao usar a vers\u00e3o 3.5. Verifique com o comando python qual a vers\u00e3o, pode ser que o Python esteja na vers\u00e3o 2, se estiver, o comando python3 deve executar a vers\u00e3o 3 . Isto acontece pois sistemas linux vem com as duas vers\u00f5es instaladas, e pode ser que a vers\u00e3o padr\u00e3o (comando python ) seja a vers\u00e3o 2. Ao usar o comando python um prompt ser\u00e1 aberto para que comandos python sejam executados. Tamb\u00e9m ser\u00e1 mostrado a vers\u00e3o do python. Esse prompt tamb\u00e9m chamados de interpretador do Python. \u00c9 uma forma de executar comandos r\u00e1pidos em Python e ver a resposta desses comandos, assim como os comandos do shell/bash do linux. $ python Python 2 .7.13 ( default, Sep 26 2018 , 18 :42:22 ) ... $ python3 Python 3 .7.2 ( default, Feb 27 2019 , 16 :03:03 ) ... Lembre-se de usar sempre o python na vers\u00e3o 3, mesmo que tenha que usar o comando python3 .","title":"Python 3"},{"location":"LEIAME/#executando-seus-arquivospy","text":"Basta usar o comando python arquivo.py que seu programa ser\u00e1 executado.","title":"Executando seus arquivos.py"},{"location":"LEIAME/#sugestoes-de-ides-integrated-development-environments","text":"Atom Pycharm VIM","title":"Sugest\u00f5es de IDEs (Integrated Development Environments)"},{"location":"aula1/","text":"Estrutura de dados Em Ci\u00eancia da computa\u00e7\u00e3o, uma estrutura de dado \u00e9 um formato de organiza\u00e7\u00e3o, gerenciamento e armazenamento de dados que habilita acesso e modifica\u00e7\u00e3o eficiente. Revis\u00e3o Vari\u00e1veis simples * Python a = 1 # Inteiro b = 2 c = True # Booleano d = 'uma string' # String e = 1.1 # Ponto flutuante (Float) print ( a ) 1 print ( b ) 2 print ( c ) True print ( d ) uma string print ( e ) 1.1 Operadores * Python # Aritmeticos principais: + - * / % # Extra: ** (potencia) a = 2 b = 4 a + b 6 a ** 2 4 # Logicos principais: not and or # Comparacao: < > <= >= == != a = 2 b = 4 a > b False b > a True Estruturas de repeti\u00e7\u00e3o ** FOR, WHILE, DO WHILE, REPEAT UNTIL. FOR *** Python for ELEMENTO in ITERADOR : CORPO DO FOR C for ( i = 0 ; i < n ; i ++ ) { CORPO DO FOR } Um iterador \u00e9 um \"conjunto de elementos\", podendo ser vazio, ter apenas um elemento, ou mais do que um elemento. Se for vazio, o corpo (escopo) do for n\u00e3o \u00e9 executado. Caso contr\u00e1rio o corpo do for \u00e9 executado em todos elementos do iterador. Python for i in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]: print ( 'i: %s ' , i ) 1 2 3 4 5 6 7 8 9 10 Outros exemplos com FOR: Python range ( 10 ) # Funcao pronta (interna) do Python. range ( 0 , 10 ) # Transformar o \"range\" em uma \"list\" (vetor). # Para fins de aprendizado, vetor e lista (list) sao sinonimos. list ( range ( 10 )) [ 0 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 )) [ 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 , 2 )) [ 5 , 7 , 9 ] vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] tamanho = len ( vetor ) # Funcao pronta (interna) do Python. print ( tamanho ) 10 for i in range ( tamanho ): print ( 'i: %s ' , vetor [ i ]) # Alernativa mais elegante. for elemento in vetor : print ( 'Elemento: %s ' , elemento ) # Alernativa elegante enumerada. for i , elemento in enumerate ( vetor ): print ( 'Elemento %s : %s ' , ( i , elemento )) list ( enumerate ( vetor )) [( 0 , 1 ), ( 1 , 2 ), ( 2 , 3 ), ( 3 , 4 ), ( 4 , 5 ), ( 5 , 6 ), ( 6 , 7 ), ( 7 , 8 ), ( 8 , 9 )] nomes = [ 'joao' , 'maria,' 'jose' ] for i , elemento in enumerate ( nomes ): print ( 'Elemento %s : %s ' , ( i , elemento )) WHILE * Python while CONDICAO : CORPO DO WHILE Enquanto a condi\u00e7\u00e3o for verdadeira o while \u00e9 executado indefinidamente; caso contr\u00e1rio o while para sua execu\u00e7\u00e3o. Python condicao = True i = 0 while condicao : print ( i ) i += 1 if i > 10 : condicao = False Fun\u00e7\u00e3o ** Python def nome ( parametro1 , parametro2 ): CORPO DA FUNCAO return VALOR Exerc\u00edcio: encontrar posi\u00e7\u00e3o de um elemento em um vetor ** Dado um vetor e um elemento como entrada para uma fun\u00e7\u00e3o chamda de find , retorne a posi\u00e7\u00e3o do elemento encontrado; caso n\u00e3o seja encontrado retorne None (nulo). Python def find ( vetor , elemento ): Exemplos e revis\u00e3o Vetor (Arranjo) Formato: Python # Em python o nome dessa estrutura de dado eh conhecida como lista # Mas para fins de exemplo criamos uma variavel com o nome vetor. # Indices do vetor comeca em 0. vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] print ( vetor [ 0 ]) 1 C /* Aqui alocamos um vetor de inteiros com 10 elementos, sendo eles todo * o intervalo [1, 10]. * Indicies comecam em 0. */ int vetor [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; printf ( \"%d\" , vetor [ 0 ]); 1 Gerenciamento: Em um vetor podemos: adicionar, atualizar, excluir e ler elementos. Adicionar * Adi\u00e7\u00e3o modifica o vetor original, aumentando pelo menos um elemento novo. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . append ( 11 ) # Metodo (funcao) de orientacao a objeto. vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] # Apenas para mostrar como eh no \"paradigma estrutural\". def meu_append ( vetor , novo_elemento ): vetor . append ( novo_elemento ) # Funcao nao retorna nada, podemos chamar de \"procedimento\". vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] meu_append ( vetor , novo_elemento ) vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] Atualizar * Atualiza\u00e7\u00e3o precisa modificar algum elemento j\u00e1 existente do vetor original. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor [ 2 ] = 11 vetor [ 1 , 2 , 11 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] Remover * Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . remove ( 5 ) # Qual algoritmo eh necessario ANTES de remover? vetor [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 , 10 ] # TODO: exercicio: fazer o seu proprio remover. def meu_remover ( vetor , elemento ): pass # Funcao nao retorna nada Ler * Python # Leitura NAO pode modificar o nosso vetor original vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] a = vetor [ 2 ] a 2 # Leitura direta do vetor para impressao print ( vetor [ 2 ]) Armazenamento: ** Mem\u00f3ria RAM, registradores do processador (CPU), dispositivo de armazenamento secund\u00e1rio (HDDs, SSDs, etc). Mem\u00f3ria RAM ** Um vetor de caracteres armazenados em mem\u00f3ria RAM. # Assumindo que cada caracter tem um byte. vetor = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] Endere\u00e7o Dado 100000 '1' 100001 '2' 100002 '3' 100003 '4' 100004 '5' 100005 '6' 100006 '7' 100007 '8' 100008 '9' 100009 '10'","title":"Aula 1 (2019-04-04)"},{"location":"aula1/#estrutura-de-dados","text":"Em Ci\u00eancia da computa\u00e7\u00e3o, uma estrutura de dado \u00e9 um formato de organiza\u00e7\u00e3o, gerenciamento e armazenamento de dados que habilita acesso e modifica\u00e7\u00e3o eficiente.","title":"Estrutura de dados"},{"location":"aula1/#revisao","text":"","title":"Revis\u00e3o"},{"location":"aula1/#variaveis-simples","text":"Python a = 1 # Inteiro b = 2 c = True # Booleano d = 'uma string' # String e = 1.1 # Ponto flutuante (Float) print ( a ) 1 print ( b ) 2 print ( c ) True print ( d ) uma string print ( e ) 1.1","title":"Vari\u00e1veis simples *"},{"location":"aula1/#operadores","text":"Python # Aritmeticos principais: + - * / % # Extra: ** (potencia) a = 2 b = 4 a + b 6 a ** 2 4 # Logicos principais: not and or # Comparacao: < > <= >= == != a = 2 b = 4 a > b False b > a True","title":"Operadores *"},{"location":"aula1/#estruturas-de-repeticao","text":"FOR, WHILE, DO WHILE, REPEAT UNTIL.","title":"Estruturas de repeti\u00e7\u00e3o **"},{"location":"aula1/#for","text":"Python for ELEMENTO in ITERADOR : CORPO DO FOR C for ( i = 0 ; i < n ; i ++ ) { CORPO DO FOR } Um iterador \u00e9 um \"conjunto de elementos\", podendo ser vazio, ter apenas um elemento, ou mais do que um elemento. Se for vazio, o corpo (escopo) do for n\u00e3o \u00e9 executado. Caso contr\u00e1rio o corpo do for \u00e9 executado em todos elementos do iterador. Python for i in [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]: print ( 'i: %s ' , i ) 1 2 3 4 5 6 7 8 9 10 Outros exemplos com FOR: Python range ( 10 ) # Funcao pronta (interna) do Python. range ( 0 , 10 ) # Transformar o \"range\" em uma \"list\" (vetor). # Para fins de aprendizado, vetor e lista (list) sao sinonimos. list ( range ( 10 )) [ 0 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 )) [ 5 , 6 , 7 , 8 , 9 ] list ( range ( 5 , 10 , 2 )) [ 5 , 7 , 9 ] vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] tamanho = len ( vetor ) # Funcao pronta (interna) do Python. print ( tamanho ) 10 for i in range ( tamanho ): print ( 'i: %s ' , vetor [ i ]) # Alernativa mais elegante. for elemento in vetor : print ( 'Elemento: %s ' , elemento ) # Alernativa elegante enumerada. for i , elemento in enumerate ( vetor ): print ( 'Elemento %s : %s ' , ( i , elemento )) list ( enumerate ( vetor )) [( 0 , 1 ), ( 1 , 2 ), ( 2 , 3 ), ( 3 , 4 ), ( 4 , 5 ), ( 5 , 6 ), ( 6 , 7 ), ( 7 , 8 ), ( 8 , 9 )] nomes = [ 'joao' , 'maria,' 'jose' ] for i , elemento in enumerate ( nomes ): print ( 'Elemento %s : %s ' , ( i , elemento ))","title":"FOR ***"},{"location":"aula1/#while","text":"Python while CONDICAO : CORPO DO WHILE Enquanto a condi\u00e7\u00e3o for verdadeira o while \u00e9 executado indefinidamente; caso contr\u00e1rio o while para sua execu\u00e7\u00e3o. Python condicao = True i = 0 while condicao : print ( i ) i += 1 if i > 10 : condicao = False","title":"WHILE *"},{"location":"aula1/#funcao","text":"Python def nome ( parametro1 , parametro2 ): CORPO DA FUNCAO return VALOR","title":"Fun\u00e7\u00e3o **"},{"location":"aula1/#exercicio-encontrar-posicao-de-um-elemento-em-um-vetor","text":"Dado um vetor e um elemento como entrada para uma fun\u00e7\u00e3o chamda de find , retorne a posi\u00e7\u00e3o do elemento encontrado; caso n\u00e3o seja encontrado retorne None (nulo). Python def find ( vetor , elemento ):","title":"Exerc\u00edcio: encontrar posi\u00e7\u00e3o de um elemento em um vetor **"},{"location":"aula1/#exemplos-e-revisao","text":"","title":"Exemplos e revis\u00e3o"},{"location":"aula1/#vetor-arranjo","text":"","title":"Vetor (Arranjo)"},{"location":"aula1/#formato","text":"Python # Em python o nome dessa estrutura de dado eh conhecida como lista # Mas para fins de exemplo criamos uma variavel com o nome vetor. # Indices do vetor comeca em 0. vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] print ( vetor [ 0 ]) 1 C /* Aqui alocamos um vetor de inteiros com 10 elementos, sendo eles todo * o intervalo [1, 10]. * Indicies comecam em 0. */ int vetor [] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; printf ( \"%d\" , vetor [ 0 ]); 1","title":"Formato:"},{"location":"aula1/#gerenciamento","text":"Em um vetor podemos: adicionar, atualizar, excluir e ler elementos.","title":"Gerenciamento:"},{"location":"aula1/#adicionar","text":"Adi\u00e7\u00e3o modifica o vetor original, aumentando pelo menos um elemento novo. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . append ( 11 ) # Metodo (funcao) de orientacao a objeto. vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ] # Apenas para mostrar como eh no \"paradigma estrutural\". def meu_append ( vetor , novo_elemento ): vetor . append ( novo_elemento ) # Funcao nao retorna nada, podemos chamar de \"procedimento\". vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] meu_append ( vetor , novo_elemento ) vetor [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ]","title":"Adicionar *"},{"location":"aula1/#atualizar","text":"Atualiza\u00e7\u00e3o precisa modificar algum elemento j\u00e1 existente do vetor original. Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor [ 2 ] = 11 vetor [ 1 , 2 , 11 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]","title":"Atualizar *"},{"location":"aula1/#remover","text":"Python vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] vetor . remove ( 5 ) # Qual algoritmo eh necessario ANTES de remover? vetor [ 1 , 2 , 3 , 4 , 6 , 7 , 8 , 9 , 10 ] # TODO: exercicio: fazer o seu proprio remover. def meu_remover ( vetor , elemento ): pass # Funcao nao retorna nada","title":"Remover *"},{"location":"aula1/#ler","text":"Python # Leitura NAO pode modificar o nosso vetor original vetor = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] a = vetor [ 2 ] a 2 # Leitura direta do vetor para impressao print ( vetor [ 2 ])","title":"Ler *"},{"location":"aula1/#armazenamento","text":"Mem\u00f3ria RAM, registradores do processador (CPU), dispositivo de armazenamento secund\u00e1rio (HDDs, SSDs, etc).","title":"Armazenamento: **"},{"location":"aula1/#memoria-ram","text":"Um vetor de caracteres armazenados em mem\u00f3ria RAM. # Assumindo que cada caracter tem um byte. vetor = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] Endere\u00e7o Dado 100000 '1' 100001 '2' 100002 '3' 100003 '4' 100004 '5' 100005 '6' 100006 '7' 100007 '8' 100008 '9' 100009 '10'","title":"Mem\u00f3ria RAM **"},{"location":"aula2/","text":"","title":"Aula 2 (2019-04-08)"},{"location":"exercicios1/","text":"Exerc\u00edcio 1.1 Defina uma fun\u00e7\u00e3o chamada max3 que dado 3 n\u00fameros (a, b, c) ela retorne o maior entre eles (sem usar a fun\u00e7\u00e3o max() ). Python # Para testar seu codigo adicione esses codigos no seu arquivo. retorno = max3 ( 1 , 2 , 3 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 3 assert max3 ( 4 , 2 , 3 ) == 4 assert max3 ( 4 , 5 , 3 ) == 5 assert max3 ( 10 , 5 , 3 ) == 10 assert max3 ( 10 , 5 , 11 ) == 11 print ( 'Tudo certo!!?' ) Exerc\u00edcio 1.2 Fa\u00e7a um fun\u00e7\u00e3o chamada media_pond3 que leia as 3 notas de um aluno e retorne a m\u00e9dia final deste aluno. Considerar que a m\u00e9dia \u00e9 ponderada e que o peso das notas \u00e9: 1, 2 e 3 respectivamente. Python # Para testar seu codigo adicione esses codigos no seu arquivo. # Necessario mais testes! retorno = media_pond3 ( 10 , 10 , 10 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 10 assert media_pond3 ( 2 , 2 , 6 ) == 4 print ( 'Tudo certo!!?' ) Exerc\u00edcio 1.2.1 Fa\u00e7a uma fun\u00e7\u00e3o chamada aprovar que retorne Verdadeiro ( True ) ou Falso ( False ) caso o aluno seja aprovado ou reprovado respectivamente, com as mesmas regras do Exerc\u00edcio 1.2. Fun\u00e7\u00f5es que s\u00f3 retornam True ou False s\u00e3o chamadas de fun\u00e7\u00f5es booleanas . Imprima 'Aprovado' ou 'Reprovado' dentro da fun\u00e7\u00e3o. Para um aluno ser aprovado \u00e9 necess\u00e1rio que ele tenha no m\u00ednimo 6 de nota. \u00c9 completamente v\u00e1lido reusar o c\u00f3digo do Exerc\u00edcio 1.2. Python # Sem testes ainda! Exerc\u00edcio 1.3 Construa uma fun\u00e7\u00e3o dist() que, tendo como dados de entrada dois pontos quaisquer no plano, p(x1,y1) e p(x2,y2), retorne a dist\u00e2ncia entre eles. A ordem dos par\u00e2metros s\u00e3o: x1, y1, x2 e y2. Python # Faca mais testes se voce quiser mais garantia # Preste a atencao na quantidade de parametros e seus respectivos nomes. retorno = dist ( 0 , 0 , 0 , 1 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 1 assert dist ( 0 , 0 , 1 , 0 ) == 1 assert dist ( 0 , 0 , 2 , 0 ) == 2 assert dist ( 0 , 0 , 0 , 3 ) == 3 assert dist ( 1 , 1 , 2 , 1 ) == 1 print ( 'Tudo certo!!?' )","title":"Exerc\u00edcios 1"},{"location":"exercicios1/#exercicio-11","text":"Defina uma fun\u00e7\u00e3o chamada max3 que dado 3 n\u00fameros (a, b, c) ela retorne o maior entre eles (sem usar a fun\u00e7\u00e3o max() ). Python # Para testar seu codigo adicione esses codigos no seu arquivo. retorno = max3 ( 1 , 2 , 3 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 3 assert max3 ( 4 , 2 , 3 ) == 4 assert max3 ( 4 , 5 , 3 ) == 5 assert max3 ( 10 , 5 , 3 ) == 10 assert max3 ( 10 , 5 , 11 ) == 11 print ( 'Tudo certo!!?' )","title":"Exerc\u00edcio 1.1"},{"location":"exercicios1/#exercicio-12","text":"Fa\u00e7a um fun\u00e7\u00e3o chamada media_pond3 que leia as 3 notas de um aluno e retorne a m\u00e9dia final deste aluno. Considerar que a m\u00e9dia \u00e9 ponderada e que o peso das notas \u00e9: 1, 2 e 3 respectivamente. Python # Para testar seu codigo adicione esses codigos no seu arquivo. # Necessario mais testes! retorno = media_pond3 ( 10 , 10 , 10 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 10 assert media_pond3 ( 2 , 2 , 6 ) == 4 print ( 'Tudo certo!!?' )","title":"Exerc\u00edcio 1.2"},{"location":"exercicios1/#exercicio-121","text":"Fa\u00e7a uma fun\u00e7\u00e3o chamada aprovar que retorne Verdadeiro ( True ) ou Falso ( False ) caso o aluno seja aprovado ou reprovado respectivamente, com as mesmas regras do Exerc\u00edcio 1.2. Fun\u00e7\u00f5es que s\u00f3 retornam True ou False s\u00e3o chamadas de fun\u00e7\u00f5es booleanas . Imprima 'Aprovado' ou 'Reprovado' dentro da fun\u00e7\u00e3o. Para um aluno ser aprovado \u00e9 necess\u00e1rio que ele tenha no m\u00ednimo 6 de nota. \u00c9 completamente v\u00e1lido reusar o c\u00f3digo do Exerc\u00edcio 1.2. Python # Sem testes ainda!","title":"Exerc\u00edcio 1.2.1"},{"location":"exercicios1/#exercicio-13","text":"Construa uma fun\u00e7\u00e3o dist() que, tendo como dados de entrada dois pontos quaisquer no plano, p(x1,y1) e p(x2,y2), retorne a dist\u00e2ncia entre eles. A ordem dos par\u00e2metros s\u00e3o: x1, y1, x2 e y2. Python # Faca mais testes se voce quiser mais garantia # Preste a atencao na quantidade de parametros e seus respectivos nomes. retorno = dist ( 0 , 0 , 0 , 1 ) print ( 'Apenas o primeiro retorno:' , retorno ) assert retorno == 1 assert dist ( 0 , 0 , 1 , 0 ) == 1 assert dist ( 0 , 0 , 2 , 0 ) == 2 assert dist ( 0 , 0 , 0 , 3 ) == 3 assert dist ( 1 , 1 , 2 , 1 ) == 1 print ( 'Tudo certo!!?' )","title":"Exerc\u00edcio 1.3"}]}